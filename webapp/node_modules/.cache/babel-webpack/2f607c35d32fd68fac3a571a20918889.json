{"ast":null,"code":"import _asyncToGenerator from \"/home/ragabi-ops/go/src/mysql-golang-app/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { merge, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/table\";\nimport * as i4 from \"@angular/material/sort\";\nimport * as i5 from \"@angular/material/paginator\";\n\nfunction AppComponent_div_5_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction AppComponent_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Somthing When Wrong Most likely lost connection \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, AppComponent_div_5_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 15);\n    i0.ɵɵtemplate(2, AppComponent_div_5_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isLoadingResults);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isRateLimitReached);\n  }\n}\n\nfunction AppComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Film Id\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r13.film_id);\n  }\n}\n\nfunction AppComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r14.title);\n  }\n}\n\nfunction AppComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Description\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r15.description);\n  }\n}\n\nfunction AppComponent_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Release Year\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r16.release_year);\n  }\n}\n\nfunction AppComponent_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 20);\n  }\n}\n\nfunction AppComponent_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 21);\n  }\n}\n/**\n * @title Table retrieving data through HTTP\n */\n\n\nexport class AppComponent {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.displayedColumns = ['film_id', 'title', 'description', 'release_year'];\n    this.data = [];\n    this.resultsLength = 0;\n    this.isLoadingResults = true;\n    this.isRateLimitReached = false;\n  }\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient); // If the user changes the sort order, reset back to the first page.\n\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    function delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n      this.isLoadingResults = true;\n      return this.exampleDatabase.GetAllFilms(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n    }), map(data => {\n      // Flip flag to show that loading has finished.\n      _asyncToGenerator(function* () {\n        // Do something before delay\n        console.log('before delay');\n        yield delay(1000); // Do something after\n\n        console.log('after delay');\n      })();\n\n      this.isLoadingResults = false;\n      this.isRateLimitReached = data === null;\n\n      if (data === null) {\n        return [];\n      } // Only refresh the result length if there is new data. In case of rate\n      // limit errors, we do not want to reset the paginator to zero, as that\n      // would prevent users from re-triggering requests.\n\n\n      this.resultsLength = data.total_count;\n      return data.items;\n    })).subscribe(data => this.data = data);\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatPaginator, 5);\n      i0.ɵɵviewQuery(MatSort, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n    }\n  },\n  decls: 23,\n  vars: 6,\n  consts: [[1, \"tool-bar\"], [1, \"example-container\", \"mat-elevation-z8\"], [\"class\", \"example-loading-shade\", 4, \"ngIf\"], [1, \"example-table-container\"], [\"mat-table\", \"\", \"matSort\", \"\", \"matSortDisableClear\", \"\", 1, \"example-table\", 3, \"dataSource\"], [\"matColumnDef\", \"film_id\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"title\"], [\"matColumnDef\", \"description\"], [\"matColumnDef\", \"release_year\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"aria-label\", \"Select page of GitHub search results\", 3, \"length\", \"pageSize\"], [1, \"example-loading-shade\"], [4, \"ngIf\"], [\"class\", \"example-rate-limit-reached\", 4, \"ngIf\"], [1, \"example-rate-limit-reached\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"mat-toolbar\");\n      i0.ɵɵelementStart(2, \"span\", 0);\n      i0.ɵɵtext(3, \"Sakila Database\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1);\n      i0.ɵɵtemplate(5, AppComponent_div_5_Template, 3, 2, \"div\", 2);\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵelementStart(7, \"table\", 4);\n      i0.ɵɵelementContainerStart(8, 5);\n      i0.ɵɵtemplate(9, AppComponent_th_9_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(10, AppComponent_td_10_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(11, 8);\n      i0.ɵɵtemplate(12, AppComponent_th_12_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(13, AppComponent_td_13_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(14, 9);\n      i0.ɵɵtemplate(15, AppComponent_th_15_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(16, AppComponent_td_16_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(17, 10);\n      i0.ɵɵtemplate(18, AppComponent_th_18_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(19, AppComponent_td_19_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(20, AppComponent_tr_20_Template, 1, 0, \"tr\", 11);\n      i0.ɵɵtemplate(21, AppComponent_tr_21_Template, 1, 0, \"tr\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"mat-paginator\", 13);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoadingResults || ctx.isRateLimitReached);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"dataSource\", ctx.data);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"length\", ctx.resultsLength)(\"pageSize\", 20);\n    }\n  },\n  directives: [i2.NgIf, i3.MatTable, i4.MatSort, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatCellDef, i3.MatHeaderRowDef, i3.MatRowDef, i5.MatPaginator, i3.MatHeaderCell, i4.MatSortHeader, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [\".tool-bar[_ngcontent-%COMP%] {\\n    display: block;\\n    width: 100%;\\n    text-align: center;\\n    font-size: x-large;  \\n  }\\n  .example-container[_ngcontent-%COMP%] {\\n    position: relative;\\n  }\\n  .example-table-container[_ngcontent-%COMP%] {\\n    position: relative;\\n    min-height: 200px;\\n    max-height: 400px;\\n    overflow: auto;\\n    margin-top: 50px\\n  }\\n  table[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n  .example-loading-shade[_ngcontent-%COMP%] {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 56px;\\n    right: 0;\\n    background: rgba(0, 0, 0, 0.15);\\n    z-index: 1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n  .example-rate-limit-reached[_ngcontent-%COMP%] {\\n    max-width: 360px;\\n    text-align: center;\\n  }\\n  \\n  .mat-column-number[_ngcontent-%COMP%], .mat-column-state[_ngcontent-%COMP%] {\\n    max-width: 64px;\\n  }\\n  .tool-bar[_ngcontent-%COMP%] {\\n    margin: auto\\n  }\\n  .mat-column-created[_ngcontent-%COMP%] {\\n    max-width: 124px;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7RUFDWjtJQUNFLGNBQWM7SUFDZCxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGtCQUFrQjtFQUNwQjtFQUVGO0lBQ0ksa0JBQWtCO0VBQ3BCO0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2Q7RUFDRjtFQUVBO0lBQ0UsV0FBVztFQUNiO0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLE9BQU87SUFDUCxZQUFZO0lBQ1osUUFBUTtJQUNSLCtCQUErQjtJQUMvQixVQUFVO0lBQ1YsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQix1QkFBdUI7RUFDekI7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixrQkFBa0I7RUFDcEI7RUFFQSxrQkFBa0I7RUFDbEI7O0lBRUUsZUFBZTtFQUNqQjtFQUVBO0lBQ0U7RUFDRjtFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCIiwiZmlsZSI6ImFwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogU3RydWN0dXJlICovXG4gIC50b29sLWJhciB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogeC1sYXJnZTsgIFxuICB9XG5cbi5leGFtcGxlLWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIFxuICAuZXhhbXBsZS10YWJsZS1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtaW4taGVpZ2h0OiAyMDBweDtcbiAgICBtYXgtaGVpZ2h0OiA0MDBweDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBtYXJnaW4tdG9wOiA1MHB4XG4gIH1cbiAgXG4gIHRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICBcbiAgLmV4YW1wbGUtbG9hZGluZy1zaGFkZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGJvdHRvbTogNTZweDtcbiAgICByaWdodDogMDtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMTUpO1xuICAgIHotaW5kZXg6IDE7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG4gIFxuICAuZXhhbXBsZS1yYXRlLWxpbWl0LXJlYWNoZWQge1xuICAgIG1heC13aWR0aDogMzYwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIFxuICAvKiBDb2x1bW4gV2lkdGhzICovXG4gIC5tYXQtY29sdW1uLW51bWJlcixcbiAgLm1hdC1jb2x1bW4tc3RhdGUge1xuICAgIG1heC13aWR0aDogNjRweDtcbiAgfVxuXG4gIC50b29sLWJhciB7XG4gICAgbWFyZ2luOiBhdXRvXG4gIH1cblxuICAubWF0LWNvbHVtbi1jcmVhdGVkIHtcbiAgICBtYXgtd2lkdGg6IDEyNHB4O1xuICB9Il19 */\"]\n});\n/** An example database that the data source uses to retrieve data for the table. */\n\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n\n  GetAllFilms(sort, order, page) {\n    const href = 'http://localhost:8080';\n    const requestUrl = `${href}/films`;\n\n    if (sort === undefined) {\n      sort = 'film_id';\n    }\n\n    return this._httpClient.get(`${requestUrl}?sort=${sort}&sort_order=${order}&page=${page}`);\n  }\n\n}","map":{"version":3,"sources":["/home/ragabi-ops/go/src/mysql-golang-app/webapp/src/app/app.component.ts","/home/ragabi-ops/go/src/mysql-golang-app/webapp/src/app/app.component.html"],"names":[],"mappings":"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","sourcesContent":["import {HttpClient,HttpHeaders, HttpParams, JsonpClientBackend} from '@angular/common/http';\nimport {Component, ViewChild, AfterViewInit, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort, SortDirection} from '@angular/material/sort';\nimport {merge, Observable, of as observableOf} from 'rxjs';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\nimport { MatTable, MatTableModule } from '@angular/material/table'  \nimport { time } from 'console';\n\n\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-root',\n  styleUrls: ['app.component.css'],\n  templateUrl: 'app.component.html',\n})\nexport class AppComponent implements AfterViewInit {\n  displayedColumns: string[] = ['film_id', 'title', 'description', 'release_year'];\n  exampleDatabase!: ExampleHttpDatabase | null;\n  data: Film[] = [];\n\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator)\n  paginator!: MatPaginator;\n  @ViewChild(MatSort)\n  sort!: MatSort;\n\n  constructor(private _httpClient: HttpClient) {}\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    function delay(ms: number) {\n      return new Promise( resolve => setTimeout(resolve, ms) );\n    }\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.GetAllFilms(\n              this.sort.active, this.sort.direction, this.paginator.pageIndex)\n            .pipe(catchError(() => observableOf(null)));\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          (async () => { \n            // Do something before delay\n            console.log('before delay')\n        \n            await delay(1000);\n        \n            // Do something after\n            console.log('after delay')\n          })();\n          this.isLoadingResults = false;\n          this.isRateLimitReached = data === null;\n\n          if (data === null) {\n            return [];\n          }\n\n          // Only refresh the result length if there is new data. In case of rate\n          // limit errors, we do not want to reset the paginator to zero, as that\n          // would prevent users from re-triggering requests.\n          this.resultsLength = data.total_count\n          return data.items;\n        })\n      ).subscribe(data => this.data = data);\n  }\n}\n\nexport interface FilmAPI {\n  items: Film[];\n  total_count: number;\n}\n\nexport interface Request {\n  sort: string\n  sort_order: string\n  page: number\n}\nexport interface Film {\n   film_id: null,\n   tite: string,\n   descrioption: string,\n   release_year: string,\n   language_id: number,\n   rental_duration: string,\n   rental_rate: number,\n   length: string,\n   replacement_cost: number,\n   rating: string,\n   last_update: string\n\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDatabase {\n  constructor(private _httpClient: HttpClient) {}\n  readonly headers = new HttpHeaders()\n    .set('Content-Type', 'application/json');\n\n  GetAllFilms(sort: string, order: SortDirection, page: number): Observable<any> {\n    const href = 'http://localhost:8080';\n    const requestUrl =\n        `${href}/films`;\n\n    if (sort === undefined){\n      sort = 'film_id'\n    } \n\n    return this._httpClient.get<any>(`${requestUrl}?sort=${sort}&sort_order=${order}&page=${page}`);\n  }\n}\n","<div class=\"tool-bar\">\n<mat-toolbar>\n  <span class=\"tool-bar\">Sakila Database</span>\n</mat-toolbar>\n</div>\n\n<div class=\"example-container mat-elevation-z8\">\n  <div class=\"example-loading-shade\"\n       *ngIf=\"isLoadingResults || isRateLimitReached\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n    <div class=\"example-rate-limit-reached\" *ngIf=\"isRateLimitReached\">\n      Somthing When Wrong Most likely lost connection\n    </div>\n  </div>\n\n  <div class=\"example-table-container\">\n\n    <table mat-table [dataSource]=\"data\" class=\"example-table\"\n           matSort  matSortDisableClear >\n\n      <ng-container matColumnDef=\"film_id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Film Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.film_id}}</td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Title</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.title}}</td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Description</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.description}}</td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"release_year\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Release Year</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.release_year}}</td>\n      </ng-container>\n    \n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n  </div>\n\n  <mat-paginator [length]=\"resultsLength\" [pageSize]=\"20\" aria-label=\"Select page of GitHub search results\"></mat-paginator>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}