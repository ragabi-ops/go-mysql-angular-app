{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { merge, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/table\";\nimport * as i4 from \"@angular/material/sort\";\nimport * as i5 from \"@angular/material/paginator\";\n\nfunction AppComponent_div_5_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction AppComponent_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" Somthing When Wrong Most likely lost connection \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, AppComponent_div_5_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 10);\n    i0.ɵɵtemplate(2, AppComponent_div_5_div_2_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isLoadingResults);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isRateLimitReached);\n  }\n}\n\nfunction AppComponent_ng_container_8_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const db_table_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, db_table_r6));\n  }\n}\n\nfunction AppComponent_ng_container_8_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r10 = ctx.$implicit;\n    const db_table_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r10[db_table_r6]);\n  }\n}\n\nfunction AppComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 13);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_8_th_1_Template, 3, 3, \"th\", 14);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_8_td_2_Template, 2, 1, \"td\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const db_table_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", db_table_r6);\n  }\n}\n\nfunction AppComponent_tr_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 18);\n  }\n}\n\nfunction AppComponent_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 19);\n  }\n}\n/**\n * @title Table retrieving data through HTTP\n */\n\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this.displayedColumns = ['film_id', 'title', 'description', 'rental_duration', 'rental_rate', 'release_year'];\n      this.data = [];\n      this.resultsLength = 0;\n      this.isLoadingResults = true;\n      this.isRateLimitReached = false;\n    }\n\n    ngAfterViewInit() {\n      this.exampleDatabase = new ExampleHttpDatabase(this._httpClient); // If the user changes the sort order, reset back to the first page.\n\n      this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n      function delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n        this.isLoadingResults = true;\n        return this.exampleDatabase.GetAllFilms(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n      }), map(data => {\n        // Flip flag to show that loading has finished.\n        this.isLoadingResults = false;\n        this.isRateLimitReached = data === null;\n\n        if (data === null) {\n          return [];\n        } // Only refresh the result length if there is new data. In case of rate\n        // limit errors, we do not want to reset the paginator to zero, as that\n        // would prevent users from re-triggering requests.\n\n\n        this.resultsLength = data.total_count;\n        return data.items;\n      })).subscribe(data => this.data = data);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"tool-bar\"], [1, \"example-container\", \"mat-elevation-z8\"], [\"class\", \"example-loading-shade\", 4, \"ngIf\"], [1, \"example-table-container\"], [\"mat-table\", \"\", \"matSort\", \"\", \"matSortDisableClear\", \"\", 1, \"example-table\", 3, \"dataSource\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"aria-label\", \"Select page of GitHub search results\", 3, \"length\", \"pageSize\"], [1, \"example-loading-shade\"], [4, \"ngIf\"], [\"class\", \"example-rate-limit-reached\", 4, \"ngIf\"], [1, \"example-rate-limit-reached\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"mat-toolbar\");\n        i0.ɵɵelementStart(2, \"span\", 0);\n        i0.ɵɵtext(3, \"Sakila Database\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵtemplate(5, AppComponent_div_5_Template, 3, 2, \"div\", 2);\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelementStart(7, \"table\", 4);\n        i0.ɵɵtemplate(8, AppComponent_ng_container_8_Template, 3, 1, \"ng-container\", 5);\n        i0.ɵɵtemplate(9, AppComponent_tr_9_Template, 1, 0, \"tr\", 6);\n        i0.ɵɵtemplate(10, AppComponent_tr_10_Template, 1, 0, \"tr\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"mat-paginator\", 8);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingResults || ctx.isRateLimitReached);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.data);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"length\", ctx.resultsLength)(\"pageSize\", 20);\n      }\n    },\n    directives: [i2.NgIf, i3.MatTable, i4.MatSort, i2.NgForOf, i3.MatHeaderRowDef, i3.MatRowDef, i5.MatPaginator, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatCellDef, i3.MatHeaderCell, i4.MatSortHeader, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n    pipes: [i2.UpperCasePipe],\n    styles: [\".tool-bar[_ngcontent-%COMP%]{display:block;width:100%;text-align:center;font-size:x-large}.example-container[_ngcontent-%COMP%]{position:relative}.example-table-container[_ngcontent-%COMP%]{position:relative;min-height:200px;max-height:400px;overflow:auto;margin-top:50px}table[_ngcontent-%COMP%]{width:100%}.example-loading-shade[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}.example-rate-limit-reached[_ngcontent-%COMP%]{max-width:360px;text-align:center}.mat-column-number[_ngcontent-%COMP%], .mat-column-state[_ngcontent-%COMP%]{max-width:64px}.tool-bar[_ngcontent-%COMP%]{margin:auto}.mat-column-created[_ngcontent-%COMP%]{max-width:124px}\"]\n  });\n  /** An example database that the data source uses to retrieve data for the table. */\n\n  return AppComponent;\n})();\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n\n  GetAllFilms(sort, order, page) {\n    const requestUrl = \"/films\";\n\n    if (sort === undefined) {\n      sort = 'film_id';\n    }\n\n    console.log(`sort=${sort}&sort_order=${order}&page=${page}`);\n    return this._httpClient.get(`${requestUrl}?sort=${sort}&sort_order=${order}&page=${page}`);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}